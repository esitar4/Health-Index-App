// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using health_index_app.Server.Data;

#nullable disable

namespace health_index_app.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("health_index_app.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a142f5eb-7cd1-4c7e-849c-95f2c73d9f09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d3ac3da-5209-477d-8893-b4685f633c09",
                            Email = "admin@cognizant.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COGNIZANT.COM",
                            NormalizedUserName = "ADMIN@COGNIZANT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENdy0nPca/D0Orw4Du4NjyrSjn8emaJxWhIF+awOctDpoa+nYq+CC1A8h9Hkc+VUwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "777bc1b9-ef89-404c-899e-3ea5e5e9ce35",
                            TwoFactorEnabled = false,
                            UserName = "admin@cognizant.com"
                        },
                        new
                        {
                            Id = "877dffea-9501-4237-b437-b95dea46a2a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25b17198-35b6-4c03-a42b-b7b6bae50499",
                            Email = "ravid@cognizant.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAVID@COGNIZANT.COM",
                            NormalizedUserName = "RAVID@COGNIZANT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJxNshchHiaXBIdqwGI2o/Sf9H5bENe7Md6eN7XhW4qsnlcsTSAyvLpI9vWc4ML9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0b78aad-f961-43ef-8fd0-ba9f2cf2c973",
                            TwoFactorEnabled = false,
                            UserName = "ravid@cognizant.com"
                        },
                        new
                        {
                            Id = "5820a983-c7b4-4153-9a97-950714bb5a8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0161783-ff1e-41f4-8f2a-a5f4448f42a1",
                            Email = "edward@cognizant.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EDWARD@COGNIZANT.COM",
                            NormalizedUserName = "EDWARD@COGNIZANT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPJtFICCGlIEecxFEuUsz+7g7OZegKm1YWwEeGDJdGPLPt93QZA+YCiqvNgK1LCNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1b0ccd9-e4cf-4b7a-8b2d-d70fbe27c82a",
                            TwoFactorEnabled = false,
                            UserName = "edward@cognizant.com"
                        },
                        new
                        {
                            Id = "6d4f586b-3e43-4655-a23d-70f120eeee08",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6869cd0c-f8eb-4d1d-935b-47acd18bde8b",
                            Email = "jessica@cognizant.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JESSICA@COGNIZANT.COM",
                            NormalizedUserName = "JESSICA@COGNIZANT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM5ZDClicA78jWWG8P2ZE/Lr34xKzEBU4NFuRQNgSgi6D4C2FgeiLm2qveOgyWmuxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93b17f53-9b7c-4ca4-bfa0-9c8dd18a6426",
                            TwoFactorEnabled = false,
                            UserName = "jessica@cognizant.com"
                        },
                        new
                        {
                            Id = "fa1b4867-9195-4bdc-8286-da2b47df22ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c507d56-d637-46ab-8910-8cb2b33142db",
                            Email = "charles@cognizant.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLES@COGNIZANT.COM",
                            NormalizedUserName = "CHARLES@COGNIZANT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEADaw36vj4suVZQ3kpA41WBKed9yC08HtAZC6z87tYqCqePrx5HJYMlmCR95tla3RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0343ad73-4d8d-42cc-8b8e-d13ee030ada7",
                            TwoFactorEnabled = false,
                            UserName = "charles@cognizant.com"
                        },
                        new
                        {
                            Id = "5a4458e5-6edb-4879-8d71-4077669149d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41d3ef90-4c4c-487b-8865-e08994ac7353",
                            Email = "scott@cognizant.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SCOTT@COGNIZANT.COM",
                            NormalizedUserName = "SCOTT@COGNIZANT.COM",
                            ParentId = "a142f5eb-7cd1-4c7e-849c-95f2c73d9f09",
                            PasswordHash = "AQAAAAEAACcQAAAAEDOlW+z6QZl7rQ8lECxM7XQPLFcpjncdIoGqOytOkL/JmQSH4aQNavyeyatxl3V3JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1699900b-410d-41d2-a242-e3df0a8f1f10",
                            TwoFactorEnabled = false,
                            UserName = "scott@cognizant.com"
                        });
                });

            modelBuilder.Entity("health_index_app.Server.Models.UserMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMeals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MealId = 10004,
                            Name = "",
                            UserId = "5a4458e5-6edb-4879-8d71-4077669149d9"
                        },
                        new
                        {
                            Id = 2,
                            MealId = 10001,
                            Name = "",
                            UserId = "5820a983-c7b4-4153-9a97-950714bb5a8f"
                        },
                        new
                        {
                            Id = 3,
                            MealId = 10005,
                            Name = "",
                            UserId = "5a4458e5-6edb-4879-8d71-4077669149d9"
                        },
                        new
                        {
                            Id = 4,
                            MealId = 10004,
                            Name = "",
                            UserId = "fa1b4867-9195-4bdc-8286-da2b47df22ed"
                        },
                        new
                        {
                            Id = 5,
                            MealId = 10003,
                            Name = "",
                            UserId = "877dffea-9501-4237-b437-b95dea46a2a5"
                        },
                        new
                        {
                            Id = 6,
                            MealId = 10004,
                            Name = "",
                            UserId = "5820a983-c7b4-4153-9a97-950714bb5a8f"
                        },
                        new
                        {
                            Id = 7,
                            MealId = 10002,
                            Name = "",
                            UserId = "6d4f586b-3e43-4655-a23d-70f120eeee08"
                        },
                        new
                        {
                            Id = 8,
                            MealId = 10006,
                            Name = "",
                            UserId = "5a4458e5-6edb-4879-8d71-4077669149d9"
                        });
                });

            modelBuilder.Entity("health_index_app.Shared.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double?>("AddedSugar")
                        .HasColumnType("float");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Calcium")
                        .HasColumnType("float");

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("CarboHydrate")
                        .HasColumnType("float");

                    b.Property<double?>("Cholesterol")
                        .HasColumnType("float");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<double?>("Fiber")
                        .HasColumnType("float");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Iron")
                        .HasColumnType("float");

                    b.Property<string>("MeasurementDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MetricServingAmount")
                        .HasColumnType("float");

                    b.Property<string>("MetricServingUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MonounsaturatedFat")
                        .HasColumnType("float");

                    b.Property<double>("NumberOfUnits")
                        .HasColumnType("float");

                    b.Property<double?>("PolyunsaturatedFat")
                        .HasColumnType("float");

                    b.Property<double?>("Potassium")
                        .HasColumnType("float");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<double?>("SaturatedFat")
                        .HasColumnType("float");

                    b.Property<string>("ServingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServingId")
                        .HasColumnType("int");

                    b.Property<string>("ServingURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Sodium")
                        .HasColumnType("float");

                    b.Property<double?>("Sugar")
                        .HasColumnType("float");

                    b.Property<double?>("VitaminA")
                        .HasColumnType("float");

                    b.Property<double?>("VitaminC")
                        .HasColumnType("float");

                    b.Property<double?>("VitaminD")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 26547,
                            BrandName = "In-N-Out",
                            Calcium = 0.0,
                            Calories = 670.0,
                            CarboHydrate = 39.0,
                            Cholesterol = 120.0,
                            Fat = 39.0,
                            Fiber = 3.0,
                            FoodName = "Double-Double Burger",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/in-n-out/double-double-burger",
                            Iron = 0.0,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 330.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 0.0,
                            Potassium = 0.0,
                            Protein = 37.0,
                            SaturatedFat = 17.0,
                            ServingDescription = "1 burger",
                            ServingId = 66486,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/in-n-out/double-double-burger",
                            Sodium = 1520.0,
                            Sugar = 10.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 31818,
                            BrandName = "Dole",
                            Calcium = 0.0,
                            Calories = 15.0,
                            CarboHydrate = 4.0,
                            Cholesterol = 0.0,
                            Fat = 0.0,
                            Fiber = 1.0,
                            FoodName = "Classic Iceberg Salad",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/dole/classic-iceberg-salad",
                            Iron = 0.0,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 85.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 0.0,
                            Potassium = 0.0,
                            Protein = 1.0,
                            SaturatedFat = 0.0,
                            ServingDescription = "1 1/2 cups",
                            ServingId = 101820,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/dole/classic-iceberg-salad",
                            Sodium = 15.0,
                            Sugar = 2.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 251811,
                            BrandName = "Coors",
                            Calcium = 0.0,
                            Calories = 164.0,
                            CarboHydrate = 13.0,
                            Cholesterol = 0.0,
                            Fat = 0.0,
                            Fiber = 0.0,
                            FoodName = "Blue Moon Beer",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/coors/blue-moon-beer",
                            Iron = 0.0,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 12.0,
                            MetricServingUnit = "oz",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 0.0,
                            Potassium = 0.0,
                            Protein = 2.0,
                            SaturatedFat = 0.0,
                            ServingDescription = "1 bottle",
                            ServingId = 289802,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/coors/blue-moon-beer",
                            Sodium = 8.0,
                            Sugar = 0.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 568586,
                            BrandName = "",
                            Calcium = 6.0,
                            Calories = 56.0,
                            CarboHydrate = 14.640000000000001,
                            Cholesterol = 0.0,
                            Fat = 0.17999999999999999,
                            Fiber = 2.5,
                            FoodName = "Golden Delicious Apples",
                            FoodType = "Generic",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/generic/apples-golden-delicious",
                            Iron = 0.10000000000000001,
                            MeasurementDescription = "small  (2-1/2\" dia)",
                            MetricServingAmount = 106.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 0.055,
                            Potassium = 113.0,
                            Protein = 0.27000000000000002,
                            SaturatedFat = 0.029000000000000001,
                            ServingDescription = "1 small (2-1/2\" dia)",
                            ServingId = 591920,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/generic/apples-golden-delicious",
                            Sodium = 1.0,
                            Sugar = 11.01,
                            VitaminA = 3.0,
                            VitaminC = 4.7999999999999998,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 2861015,
                            BrandName = "Annie Chun's",
                            Calcium = 0.0,
                            Calories = 280.0,
                            CarboHydrate = 59.0,
                            Cholesterol = 0.0,
                            Fat = 1.0,
                            Fiber = 3.0,
                            FoodName = "Vietnamese Pho",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/annie-chuns/vietnamese-pho",
                            Iron = 0.0,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 170.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 1.0,
                            Potassium = 0.0,
                            Protein = 10.0,
                            SaturatedFat = 0.0,
                            ServingDescription = "1 bowl",
                            ServingId = 2787144,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/annie-chuns/vietnamese-pho",
                            Sodium = 1030.0,
                            Sugar = 4.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 9771793,
                            BrandName = "Suraj",
                            Calcium = 0.0,
                            Calories = 140.0,
                            CarboHydrate = 24.0,
                            Cholesterol = 0.0,
                            Fat = 3.0,
                            Fiber = 1.0,
                            FoodName = "Naan",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/suraj/naan",
                            Iron = 0.0,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 50.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 0.0,
                            Potassium = 0.0,
                            Protein = 4.0,
                            SaturatedFat = 0.5,
                            ServingDescription = "1/2 naan",
                            ServingId = 9336939,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/suraj/naan",
                            Sodium = 320.0,
                            Sugar = 2.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 41321916,
                            BrandName = "Nong Shim",
                            Calcium = 20.0,
                            Calories = 450.0,
                            CarboHydrate = 64.0,
                            Cholesterol = 5.0,
                            Fat = 18.0,
                            Fiber = 5.0,
                            FoodName = "Tonkotsu Ramen",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/nong-shim/tonkotsu-ramen",
                            Iron = 2.2000000000000002,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 101.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 3.0,
                            Potassium = 380.0,
                            Protein = 8.0,
                            SaturatedFat = 7.0,
                            ServingDescription = "1 container",
                            ServingId = 36059775,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/nong-shim/tonkotsu-ramen",
                            Sodium = 1550.0,
                            Sugar = 5.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 91707,
                            BrandName = "Wylwood",
                            Calcium = 0.0,
                            Calories = 30.0,
                            CarboHydrate = 6.0,
                            Cholesterol = 0.0,
                            Fat = 0.0,
                            Fiber = 2.0,
                            FoodName = "Stir Fry Vegetables",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/wylwood/stir-fry-vegetables",
                            Iron = 0.0,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 75.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 0.0,
                            Potassium = 0.0,
                            Protein = 2.0,
                            SaturatedFat = 0.0,
                            ServingDescription = "3/4 cup",
                            ServingId = 132185,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/wylwood/stir-fry-vegetables",
                            Sodium = 15.0,
                            Sugar = 3.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        },
                        new
                        {
                            Id = 1921249,
                            BrandName = "Assi",
                            Calcium = 0.0,
                            Calories = 123.0,
                            CarboHydrate = 15.0,
                            Cholesterol = 0.0,
                            Fat = 3.1000000000000001,
                            Fiber = 5.0,
                            FoodName = "Curry",
                            FoodType = "Brand",
                            FoodURL = "https://www.fatsecret.com/calories-nutrition/assi/curry",
                            Iron = 0.0,
                            MeasurementDescription = "serving",
                            MetricServingAmount = 180.0,
                            MetricServingUnit = "g",
                            NumberOfUnits = 0.0,
                            PolyunsaturatedFat = 0.0,
                            Potassium = 0.0,
                            Protein = 3.0,
                            SaturatedFat = 2.0,
                            ServingDescription = "1 serving",
                            ServingId = 1886238,
                            ServingURL = "https://www.fatsecret.com/calories-nutrition/assi/curry",
                            Sodium = 802.0,
                            Sugar = 6.0,
                            VitaminA = 0.0,
                            VitaminC = 0.0,
                            VitaminD = 0.0
                        });
                });

            modelBuilder.Entity("health_index_app.Shared.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("HealthIndex")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            HealthIndex = 5.0
                        },
                        new
                        {
                            Id = 10002,
                            HealthIndex = 3.0
                        },
                        new
                        {
                            Id = 10003,
                            HealthIndex = 7.0
                        },
                        new
                        {
                            Id = 10004,
                            HealthIndex = 10.0
                        },
                        new
                        {
                            Id = 10005,
                            HealthIndex = 1.0
                        },
                        new
                        {
                            Id = 10006,
                            HealthIndex = 6.0
                        });
                });

            modelBuilder.Entity("health_index_app.Shared.Models.MealFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.ToTable("MealFoods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1.0,
                            FoodId = 26547,
                            MealId = 10001
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1.0,
                            FoodId = 31818,
                            MealId = 10001
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1.0,
                            FoodId = 251811,
                            MealId = 10001
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1.0,
                            FoodId = 41321916,
                            MealId = 10002
                        },
                        new
                        {
                            Id = 5,
                            Amount = 2.0,
                            FoodId = 26547,
                            MealId = 10002
                        },
                        new
                        {
                            Id = 6,
                            Amount = 1.0,
                            FoodId = 91707,
                            MealId = 10003
                        },
                        new
                        {
                            Id = 7,
                            Amount = 1.0,
                            FoodId = 1921249,
                            MealId = 10003
                        },
                        new
                        {
                            Id = 8,
                            Amount = 1.0,
                            FoodId = 568586,
                            MealId = 10003
                        },
                        new
                        {
                            Id = 9,
                            Amount = 1.0,
                            FoodId = 91707,
                            MealId = 10004
                        },
                        new
                        {
                            Id = 10,
                            Amount = 1.0,
                            FoodId = 31818,
                            MealId = 10004
                        },
                        new
                        {
                            Id = 11,
                            Amount = 1.0,
                            FoodId = 568586,
                            MealId = 10004
                        },
                        new
                        {
                            Id = 12,
                            Amount = 1.0,
                            FoodId = 9771793,
                            MealId = 10004
                        },
                        new
                        {
                            Id = 13,
                            Amount = 10.0,
                            FoodId = 251811,
                            MealId = 10005
                        },
                        new
                        {
                            Id = 14,
                            Amount = 1.0,
                            FoodId = 2861015,
                            MealId = 10005
                        },
                        new
                        {
                            Id = 15,
                            Amount = 2.0,
                            FoodId = 91707,
                            MealId = 10006
                        },
                        new
                        {
                            Id = 16,
                            Amount = 1.0,
                            FoodId = 1921249,
                            MealId = 10006
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cd7e9f2f-d755-43a5-93e4-b0e3f3311a58",
                            ConcurrencyStamp = "a7595f36-599d-4a90-81b5-61129c4f4881",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a142f5eb-7cd1-4c7e-849c-95f2c73d9f09",
                            RoleId = "cd7e9f2f-d755-43a5-93e4-b0e3f3311a58"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("health_index_app.Server.Models.ApplicationUser", b =>
                {
                    b.HasOne("health_index_app.Server.Models.ApplicationUser", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("health_index_app.Server.Models.UserMeal", b =>
                {
                    b.HasOne("health_index_app.Shared.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("health_index_app.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("health_index_app.Shared.Models.MealFood", b =>
                {
                    b.HasOne("health_index_app.Shared.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("health_index_app.Shared.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("health_index_app.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("health_index_app.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("health_index_app.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("health_index_app.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
